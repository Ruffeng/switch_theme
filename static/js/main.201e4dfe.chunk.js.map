{"version":3,"sources":["helpers/SwitchHelper.tsx","components/Wrapper.tsx","components/Switch.tsx","components/Footer.tsx","components/SwitchTheme.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SwitchThemeState","React","createContext","SwitchThemeDispatch","SwitchThemeProvider","_ref","children","_React$useState","useState","_React$useState2","Object","slicedToArray","on","setOn","react_default","a","createElement","Provider","value","useSwitchThemeContext","useContext","toggle","WrapperStyled","styled","div","_templateObject","props","Wrapper","callAll","_len","arguments","length","fns","Array","_key","_len2","args","_key2","forEach","fn","apply","Switch","_ref3","Fragment","RenderSwitch","_ref2","onChange","_useSwitchThemeContex3","switchProps","_useSwitchThemeContex2","objectWithoutProperties","objectSpread","useSwitch","es_switch","assign","checked","id","InfoSwitch","isOn","Footer","href","Paragraph","p","SwitchTheme_templateObject","Intro","CompoundIntruder","SwitchTheme","SwitchHelper_SwitchThemeProvider","components_Wrapper","SwitchTheme_Intro","Switch_Switch","alert","SwitchTheme_CompoundIntruder","App","components_SwitchTheme","Boolean","window","location","hostname","match","WebFont","load","google","families","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.201e4dfe.chunk.js","sourcesContent":["import React from 'react'\n\nconst SwitchThemeState = React.createContext<boolean>(false)\nconst SwitchThemeDispatch = React.createContext<(() => void)>(() => {})\n\nexport const SwitchThemeProvider = ({ children }: { children: React.ReactNode }) => {\n  const [on, setOn] = React.useState<boolean>(false)\n  const toggle = () => {\n    setOn(!on)\n  }\n\n  return(\n    <SwitchThemeState.Provider value={on}>\n      <SwitchThemeDispatch.Provider value={toggle}>\n        { children }\n      </SwitchThemeDispatch.Provider>\n    </SwitchThemeState.Provider>\n  )\n}\n\n\nexport const useSwitchThemeContext = () => {\n  const on = React.useContext(SwitchThemeState)\n  const toggle = React.useContext(SwitchThemeDispatch)\n\n  return { on, toggle }\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport {useSwitchThemeContext} from '../helpers/SwitchHelper'\n\nconst WrapperStyled = styled.div<{on: boolean}>`\nbackground: ${(props) => props.on ? '#2D2A32' : '#FFFFF9' };\n& > * {\n  color: ${(props) => props.on ? '#FFFFF9' : '#2D2A32' };\n  transition: color 1.5s\n}\nheight: 100vh;\ntransition: background-color 1.5s;\ndisplay: flex;\njustify-content: center; \nalign-items: center;\nflex-direction: column;\nfont-family: Montserrat;\n`\n\nconst Wrapper: React.FC = ({children}) => {\n  const { on } = useSwitchThemeContext()\n\n  return (\n    <WrapperStyled on={on}>\n      {children}\n    </WrapperStyled>\n  )\n}\nexport default Wrapper\n","import React from 'react'\nimport {Switch as SwitchAnt} from 'antd'\n\nimport {useSwitchThemeContext} from '../helpers/SwitchHelper'\n\n\nconst callAll = (...fns: (Function | undefined)[] ) => (...args: any[]) => fns.forEach(fn => fn && fn(...args))\n\nconst InfoSwitch: React.FC = () => {\n  const { on } = useSwitchThemeContext()\n  const isOn = on ? 'light mode' : 'dark mode'\n  return (\n    <h2> Switch to { isOn }</h2>\n  )\n}\n\nconst useSwitch = () => {\n  const { on, toggle } = useSwitchThemeContext()\n  const switchProps = ({onChange, ...props}: {onChange: () => void, [key: string]: any}) => {\n    return  {\n      ...props,\n      onChange: callAll(toggle, onChange)\n    }\n  }\n  return {\n    switchProps\n  }\n}\n\nconst RenderSwitch: React.FC<{ onChange: () => void }> = ({ onChange } ) => {\n  const { on, toggle } = useSwitchThemeContext()\n  const {switchProps} = useSwitch()\n  return(\n    <SwitchAnt checked={on} {\n      ...switchProps({\n        onChange,\n        id: 'my-dynamic-id'\n      })\n      }\n    />\n  )\n}\n\nexport const Switch = ({ children }: { children: React.ReactNode }) => (\n  <React.Fragment>\n    {children}\n  </React.Fragment>\n)\n\nSwitch.RenderSwitch = RenderSwitch\nSwitch.InfoSwitch = InfoSwitch\n","import React from 'react'\nimport styled from 'styled-components'\n\n\n\nexport default () => (\n  <h3> Made with ‚ù§Ô∏èon Sunday. watch my code at <a href='https://github.com/Ruffeng/switch_theme'> Github </a> </h3>\n) \n","import React from 'react'\nimport styled from 'styled-components'\n\nimport {SwitchThemeProvider, useSwitchThemeContext} from '../helpers/SwitchHelper'\nimport Wrapper from './Wrapper'\nimport {  Switch } from './Switch'\nimport Footer from './Footer'\n\nconst Paragraph = styled.p`\npadding: 20px;\n`\n\nconst Intro : React.FC = () => (\n  <h1> Advanced patterns in React </h1>\n)\n\nconst CompoundIntruder = () => (\n  <Paragraph> Compound components let's you enter components inside a module, assuring that our code won't break üéâüéä</Paragraph>\n)\n\n\nconst SwitchTheme: React.FC = () => {\n  return(\n    <SwitchThemeProvider>\n      <Wrapper>\n        <Intro />\n        <Switch>\n          <Switch.InfoSwitch />\n          <Switch.RenderSwitch onChange={()=> alert('This alert is extended functionality from the default onChange')}/>\n          <CompoundIntruder />\n        </Switch>\n        <Footer />\n      </Wrapper>\n    </SwitchThemeProvider>\n  )\n}\n\n\nexport default SwitchTheme\n","import 'antd/dist/antd.css';\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport SwitchTheme from './components/SwitchTheme'\n\n\n\nconst App: React.FC = () => {\n  return (\n    <SwitchTheme />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WebFont from 'webfontloader';\n\nWebFont.load({\n  google: {\n    families: ['Montserrat']\n  }\n});\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}